--- netkit-telnet-0.17/telnetlogin/telnetlogin.c	2000-04-13 10:07:22.000000000 +0900
+++ netkit-telnet-0.17.yarare/telnetlogin/telnetlogin.c	2015-05-19 16:35:33.000000000 +0900
@@ -51,20 +51,28 @@
 #include <string.h>
 #include <stdarg.h>
 #include <stdio.h>
+#include <syslog.h>
+
+#include <sys/stat.h>
+#include <time.h>
 
 #ifndef _PATH_LOGIN
 #define _PATH_LOGIN "/bin/login"
+//#define _PATH_LOGIN "/home/koide/work/login/fgetty-0.6/login"
 #endif
 
+extern char **environ;
+
 static const char *remhost = NULL;
 
+static void die(const char *, ...) __attribute__ ((noreturn));
+
 static void die(const char *fmt, ...) {
    va_list ap;
-   fprintf(stderr, "telnetlogin: ");
+   openlog("telnetlogin", LOG_PID, LOG_AUTHPRIV);
    va_start(ap, fmt);
-   vfprintf(stderr, fmt, ap);
+   vsyslog(LOG_CRIT, fmt, ap);
    va_end(ap);
-   fprintf(stderr, "\n");
    exit(1);
 }
 
@@ -72,7 +80,7 @@
    int i=0;
    /* should we check length? */
    for (i=0; hname[i]; i++) {
-      if (hname[i]<=32 && hname[i]>126) return -1;
+      if ((hname[i]<=32) || (hname[i]>126)) return -1;
    }
    return 0;
 }
@@ -86,41 +94,6 @@
    return 0;
 }
 
-static int check_display(char *disp) {
-   char *colon, *s;
-   struct hostent *hp;
-   int num;
-
-   colon = strchr(disp, ':');
-   if (!colon) return -1;
-   *colon = 0;  /* temporarily */
-
-   if (check_a_hostname(disp)) return -1;
-
-   hp = gethostbyname(disp);
-   if (!hp) return -1;
-
-   *colon = ':';
-   s = colon+1;
-   while (*s && isdigit(*s)) s++;
-   if (*s) {
-      if (*s!='.') return -1;
-      s++;
-      while (*s && isdigit(*s)) s++;
-   }
-   if (*s) return -1;
-
-   num = atoi(colon+1);
-   if (num<0 || num>99) return -1;
-
-   return 0;
-}
-
-static int check_posixly_correct(char *val) {
-   if (strlen(val)==0 || !strcmp(val, "1")) return 0;
-   return -1;
-}
-
 static int check_remotehost(char *val) {
    if (check_a_hostname(val)) return -1;
    if (remhost && strcmp(val, remhost)) return -1;
@@ -132,8 +105,6 @@
    int (*validator)(char *);
 } legal_envs[] = {
    { "TERM", check_term },
-   { "DISPLAY", check_display },
-   { "POSIXLY_CORRECT", check_posixly_correct },
    { "REMOTEHOST", check_remotehost },
    { NULL, NULL }
 };
@@ -166,10 +137,7 @@
    static char argv0[] = "login";
    int argn, i, j;
    const char *rh = NULL;
-   char **envs = __environ;
-
-   /* make as sure as possible no library routines or anything can use it */
-   __environ = NULL;
+   char **envs = environ;
 
    /* first, make sure our stdin/stdout/stderr are aimed somewhere */
    i = open("/", O_RDONLY);
@@ -194,6 +162,9 @@
    if (argn < argc && !strcmp(argv[argn], "-p")) {
       argn++;
    }
+   if (argn < argc && argv[argn][0] != '-') {
+      argn++;
+   }
    if (argn < argc) die("Illegal args: too many args");
    argv[0] = argv0;
 
@@ -201,21 +172,22 @@
    if (envs) for (i=0; envs[i]; i++) {
       char *testenv = envs[i];
       size_t testlen = strlen(testenv);
-      int ok = 0;
-      for (j=0; legal_envs[j].name && !ok; j++) {
+      for (j=0; legal_envs[j].name; j++) {
 	 const char *okenv = legal_envs[j].name;
 	 size_t oklen = strlen(okenv);
+	 int sign;
 
 	 if (testlen < oklen) continue;
 	 if (testenv[oklen]!='=') continue;
-	 if (memcmp(testenv, okenv, oklen)) continue;
+	 if ((sign = memcmp(testenv, okenv, oklen)) < 0) {
+	    continue;
+	 } else if (sign > 0) {
+	    break;
+	 }
 	 if (legal_envs[j].validator(testenv+oklen+1)) {
 	    die("Invalid environment: bad value for %s", okenv);
 	 }
-	 ok = 1;
-      }
-      if (!ok) {
-	 die("Illegal environment: forbidden variable");
+	 break;
       }
    }
 
@@ -234,6 +206,13 @@
     * but, should we insist that ruid==nobody?
     */
 
+#ifdef debian
+   /*
+    * Debian's /bin/login doesn't work properly unless we're really root.
+    */
+   setuid(0);
+#endif
+
    /*
     * don't do anything with limits, itimers, or process priority either
     */
@@ -251,6 +230,47 @@
     * now exec login
     * argv[0] was set up above.
     */
+   char buf[BUFSIZ];
+   FILE *fp;
+   struct stat statbuf;
+   time_t timer;
+#define LOCKFILE "/var/tmp/xxxlockfile"
+
+   (void)snprintf(buf, sizeof(buf), "telnetlogin: %s %s %s %s %s %s %s %s %s %s\n",
+		  argv[0], argv[1], argv[2], argv[3], argv[4], argv[5], argv[6], 
+		  argv[7], argv[8], argv[9]);
+   syslog(LOG_INFO, buf);
+
+   printf("RTA50i Rev.3.04.39 (Mon Nov  1 20:50:13 1999)\n");
+   printf("Copyright (c) 1994-1999 Yam*ha Corporation.\n");
+   printf("00:a0:de:03:a4:c3\n");
+   printf("Memory 4Mbytes, 1LAN, 1BRI\n");
+   printf("> ");
+
+   for (; ; ) {
+     fgets(buf, BUFSIZ, stdin);
+     if (!strcmp(buf, "administrator\n")) break;
+     printf("> ", buf);
+   }
+
+   if (!strcmp(argv[4], "attacker")) { // user is attacker ? 
+     // create lockfile 
+     fp = fopen(LOCKFILE,"a");
+     time(&timer);
+     fprintf(fp, "%s", ctime(&timer));
+     fclose(fp);
+     // and exit.
+     exit(255);
+   } 
+   if (stat(LOCKFILE, &statbuf)==0) { // lockfile is exist !
+     time(&timer);
+     if (timer - statbuf.st_mtime < 60) {
+       exit(255);
+     }
+     unlink(LOCKFILE);
+   }
    execve(_PATH_LOGIN, argv, envs);
+   //argv[0]="bash"; argv[1]=NULL;
+   //execve("/bin/bash", argv, envs);
    exit(255);
 }
